name: CMake

on:
  push:
    branches: [ master ]
    tags:
      - '*'
  pull_request:
    branches: [ master ]

env:
  BUILD_TYPE: Release
  PROJECT_NAME: ScaleRemapper

jobs:
  build:
    strategy:
      matrix:
        runner: ['ubuntu']
    runs-on: ${{ matrix.runner }}-latest
    name: ${{ matrix.runner }}
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v2
        with:
          token: ${{secrets.GH_PAT}}
          submodules: 'recursive'

      - name: Set Up Node.js
        uses: actions/setup-node@v2

      - name: Set Up Yarn
        run: npm install -g yarn

      - name: Install UI Dependencies
        working-directory: ./ui
        run: yarn install

      - name: Build UI Bundle
        working-directory: ./ui
        run: yarn build
        
      - name: Install Linux Deps
        if: runner.os == 'Linux'
        run: |
            sudo apt-get update && sudo apt install libasound2-dev libcurl4-openssl-dev libx11-dev libxinerama-dev libxext-dev libfreetype6-dev libwebkit2gtk-4.0-dev libglu1-mesa-dev

      - name: Configure CMake
        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

      - name: Build
        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{env.PROJECT_NAME}}_${{ matrix.runner }}
          path: ${{github.workspace}}/build/${{env.PROJECT_NAME}}_artefacts/${{env.BUILD_TYPE}}/**/*.vst3
          if-no-files-found: error
          retention-days: 1

  release:
    if: contains(github.ref, 'tags/v')
    runs-on: ubuntu-latest
    needs: build
    outputs: 
        upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
    - name: Get tag
      id: tag
      uses: dawidd6/action-get-tag@v1
      with:
        strip_v: true

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      with:
        tag_name: ${{steps.tag.outputs.tag}}
        release_name: ${{steps.tag.outputs.tag}}
        draft: false
        prerelease: true

    - name: Download All Artifacts
      uses: actions/download-artifact@v2
  
    - name: Upload Windows Asset
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./${{env.PROJECT_NAME}}_windows.zip
        asset_name: ${{env.PROJECT_NAME}}_windows.zip
        asset_content_type: application/zip

    - name: Upload Linux Asset
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./${{env.PROJECT_NAME}}_ubuntu.zip
        asset_name: ${{env.PROJECT_NAME}}_ubuntu.zip
        asset_content_type: application/zip

    - name: Upload MacOS Asset
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./${{env.PROJECT_NAME}}_macos.zip
        asset_name: ${{env.PROJECT_NAME}}_macos.zip
        asset_content_type: application/zip